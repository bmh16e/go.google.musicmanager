// Package musicmanager describes the protocol buffer interface to
// Google's Music Manager service.  A service call is initiated by
// POSTing an encoded protobuf message to its endpoint with a Google
// OAuth 2.0 token carrying the scope
// https://www.googleapis.com/auth/musicmanager.
// Being that this interface is reverse-engineered, not a lot is known
// about it; most of the package is undocumented.
//
// The service revolves around three kinds of identifiers: device IDs,
// client IDs and server IDs.  A device ID uniquely identifies a client
// device to Google Play, and every service call takes one as a
// parameter, usually called either uploader_id or client_id.  Before
// a device ID can be used with service calls, it must be authorized
// with one's Play Music account using the UploadService.UpAuth call;
// failure to do so will cause the call to be rejected with a 403
// Forbidden error.  Note that there are limits on how many devices one
// account can have authorized, with how many accounts one device can be
// authorized, and with how many devices one accout can deauthorize in a
// year, so be conservative in authorizing new devices.
//
// A device ID can be any nonempty string.  The official PC and Android
// clients use the computer's MAC address and Android ID respectively.
// You can study the IDs of your registered devices in the Play Music
// web interface: they are stored in the id attributes of the
// .device-list-item div elements on the Settings page.  Using a
// MAC-address-like device ID is recommended, as some service calls
// have been known to fail with non-MAC-ids.
//
// Client and server IDs uniquely identify tracks on the client and
// server side respectively.  Client IDs are only provided with calls
// that upload new stuff to Play Music, and generating and maintaining
// them is your responsibility.  Be careful with them, as uploading
// something to Play Music with a client ID that is already present on
// your account will cause the request to fail, and there appears to be
// no way to query the Music Manager service for which track was
// uploaded with a given client ID.  A client ID can be any nonempty
// string; the official PC client generates them by stripping a file of
// its tags, calculating the MD5 hash of the result, converting it to
// base 64, and removing the trailing ===.
//
// Server IDs are generated by the server, and they take the form of
// a version 3 UUID.  Most calls dealing with tracks return a server
// ID in the response.  These too can be inspected in the web interface
// by looking at the data-id property of the tr element representing
// the track of interest on any track listing page.
//
// The service calls are organized into three services, UploadService,
// DownloadService and LockerService, of which only the first two are
// known.  In order to keep duplication of information to a minimum, the
// details for the requests and responses of the service calls are
// documented by their respective message definitions.  We apologize for
// the inconvenience.
package musicmanager

// The service definitions in this file do not actually appear in the
// official Google Music Manager binary; they are organized here as such
// for convenience and clarity of documentation.

// UploadService handles uploading track and playlist metadata to
// Google Play.  Uploading of audio data is handled by non-protobuf
// calls documented elsewhere.  All endpoints return an
// UploadResponse message, with the actual endpoint-specific response
// stored as one of its fields.  In the service definition, a comment
// after a call declaration reveals the type of its actual response; if
// this comment is empty, the call returns nothing.
//
// Endpoint base URL: https://android.clients.google.com/upsj/
//
// Note: Though the endpoints must be accessed over HTTPS, this server
// is known to have some certificate problems.  You may have to turn
// off SSL verification to access it.
type UploadService interface {

	// UpAuth authorizes the specified device with this account.
	// Re-authorizing an already authorized device can be used to
	// change its name.
	//
	// Endpoint: upauth
	UpAuth(*UpAuthRequest) (*UploadResponse, error) // UploadResponse.AuthStatus

	// ClientState returns a summary of the Play Music account state.
	//
	// Endpoint: clientstate
	ClientState(*ClientStateRequest) (*UploadResponse, error) // ClientStateResponse

	// UploadMetadata uploads track metadata to Google Play.  In response,
	// the server may then ask the client to upload certain tracks, provide
	// samples of others, or inform that some of the tracks are already
	// present or erroneous in some way.  If an upload is requested, the
	// server response carries a newly allocated server ID for the track.
	//
	// It is unclear where and how album art is supposed to be uploaded.
	//
	// Endpoint: metadata?version=1
	UploadMetadata(*UploadMetadataRequest) (*UploadResponse, error) // UploadMetadataResponse

	// UploadSample responds to track sample requests returned by
	// UploadMetadata with audio samples.  It returns a
	// similar list of responses to UploadMetadata, containing either
	// error rejections, upload requests with new server IDs, or
	// notifications that the sample was matched with a known track.
	//
	// Endpoint: sample?version=1
	UploadSample(*UploadSampleRequest) (*UploadResponse, error) // UploadSampleResponse

	// UpdateUploadState tells Google Play that we will be
	// starting/pausing/stopping our upload.  Stopping the upload causes
	// the upload progress ticker in the web interface to disappear, but
	// the effect of the others is unknown.
	//
	// Endpoint: uploadstate
	UpdateUploadState(*UpdateUploadStateRequest) (*UploadResponse, error) //

	// GetJobs returns a list of outstanding upload jobs.
	// An upload job is created when UploadMetadata returns a server ID,
	// and destroyed when audio data is uploaded in an upload session.
	//
	// Endpoint: getjobs
	GetJobs(*GetJobsRequest) (*UploadResponse, error) // GetJobsResponse

	// DeleteUploadRequested cancels all outstanding upload jobs.
	//
	// Endpoint: deleteuploadrequested
	DeleteUploadRequested(*DeleteUploadRequestedRequest) (*UploadResponse, error) //

	// UploadPlaylist and UploadPlaylistEntry presumably manage playlists,
	// but their endpoints are unknown.
	UploadPlaylist(*UploadPlaylistRequest) (*UploadResponse, error)           // UploadPlaylistResponse
	UploadPlaylistEntry(*UploadPlaylistEntryRequest) (*UploadResponse, error) // UploadPlaylistEntryResponse
}

// DownloadService handles listing of tracks.  Actually downloading them
// is done through a non-protobuf call documented elsewhere.
//
// Endpoint base URL: https://music.google.com/music/
type DownloadService interface {

	// GetTracksToExport lists tracks with a subset of their metadata.
	//
	// Endpoint: exportids
	GetTracksToExport(*GetTracksToExportRequest) (*GetTracksToExportResponse, error)
}

// LockerService presumably handles all metadata management of one's
// Play Music library.  Nothing is actually known about these calls;
// they are provided here for future reference.
type LockerService interface {
	GetTracks(*GetTracksRequest) (*GetTracksResponse, error)
	GetPlaylistEntries(*GetPlaylistEntriesRequest) (*GetPlaylistEntriesResponse, error)
	GetPlaylists(*GetPlaylistsRequest) (*GetPlaylistsResponse, error)
	BatchLookup(*BatchLookupRequest) (*BatchLookupResponse, error)
	BatchMutateTracks(*BatchMutateTracksRequest) (*BatchMutateTracksResponse, error)
	BatchMutatePlaylists(*BatchMutatePlaylistsRequest) (*BatchMutatePlaylistsResponse, error)
	BatchMutatePlaylistEntries(*BatchMutatePlaylistEntriesRequest) (*BatchMutatePlaylistEntriesResponse, error)
	MagicPlaylist(*MagicPlaylistRequest) (*MagicPlaylistResponse, error)
	FlushLocker(*FlushLockerRequest) (*FlushLockerResponse, error)
	GetAlbums(*GetAlbumsRequest) (*GetAlbumsResponse, error)
	GetArtists(*GetArtistsRequest) (*GetArtistsResponse, error)
	GetGenres(*GetGenresRequest) (*GetGenresResponse, error)
	GetDynamicPlaylistEntries(*GetDynamicPlaylistEntriesRequest) (*GetDynamicPlaylistEntriesResponse, error)
	GetAggregationsByTrackType(*GetAggregationsByTrackTypeRequest) (*GetAggregationsByTrackTypeResponse, error)
	GetAggregationsByAvailabilityStatus(*GetAggregationsByAvailabilityStatusRequest) (*GetAggregationsByAvailabilityStatusResponse, error)
	AddPromoTracks(*AddPromoTracksRequest) (*AddPromoTracksResponse, error)
	GetPlaylistAggregations(*GetPlaylistAggregationsRequest) (*GetPlaylistAggregationsResponse, error)
	RemoteControlCommand(*RemoteControlCommandRequest) (*RemoteControlCommandResponse, error)
}
